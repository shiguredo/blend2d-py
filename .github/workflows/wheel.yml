name: wheel

on:
  workflow_dispatch:
  push:
    paths-ignore:
      - "**.md"
      - "test/**"

permissions:
  contents: write
  actions: read

jobs:
  build_macos:
    strategy:
      matrix:
        platform:
          - name: macos-15_arm64
            runs_on: macos-15
          - name: macos-14_arm64
            runs_on: macos-14
        python_version:
          - "3.11"
          - "3.12"
          - "3.13"
    runs-on: ${{ matrix.platform.runs_on }}
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v5
      - uses: astral-sh/setup-uv@v6
        with:
          enable-cache: false
      - run: |
          uv python pin ${{ matrix.python_version }}
          uv sync
      - run: uv build --wheel --out-dir wheelhouse
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.name }}_python-${{ matrix.python_version }}
          path: wheelhouse/*.whl

  build_ubuntu:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: ubuntu-24.04_x86_64
            runs_on: ubuntu-24.04
            plat: manylinux_2_39_x86_64
          - name: ubuntu-24.04_arm64
            runs_on: ubuntu-24.04-arm
            plat: manylinux_2_39_aarch64
          - name: ubuntu-22.04_x86_64
            runs_on: ubuntu-22.04
            plat: manylinux_2_35_x86_64
          - name: ubuntu-22.04_arm64
            runs_on: ubuntu-22.04-arm
            plat: manylinux_2_35_aarch64
        python_version:
          - "3.11"
          - "3.12"
          - "3.13"
    runs-on: ${{ matrix.platform.runs_on }}
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v5
      - uses: astral-sh/setup-uv@v6
        with:
          enable-cache: false
      - name: Setup Python via uv
        shell: bash
        run: |
          uv python pin ${{ matrix.python_version }}
          uv sync
      - name: Build wheel
        run: uv build --wheel
      - name: Repair wheel with auditwheel (uvx)
        shell: bash
        run: |
          mkdir -p wheelhouse
          # auditwheel と patchelf を一時ツール環境で実行
          uvx --from auditwheel auditwheel --version
          uvx --with patchelf --from auditwheel auditwheel show dist/*.whl || true
          # manylinux 互換の wheel に修復（ホスト上）
          uvx --with patchelf --from auditwheel auditwheel repair dist/*.whl -w wheelhouse --plat ${{ matrix.platform.plat }} --only-plat
      - name: Upload Repaired Wheels
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.name }}_python-${{ matrix.python_version }}
          path: wheelhouse/*.whl

  build_windows:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: windows-2025_x86_64
            runs_on: windows-2025
        python_version:
          - "3.11"
          - "3.12"
          - "3.13"
    runs-on: ${{ matrix.platform.runs_on }}
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v5
      - uses: astral-sh/setup-uv@v6
        with:
          enable-cache: false
      - name: Setup Python via uv
        shell: bash
        run: |
          uv python pin ${{ matrix.python_version }}
          uv sync
      - name: Build wheel
        run: uv build --wheel --out-dir wheelhouse
      - name: Upload Wheels
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.name }}_python-${{ matrix.python_version }}
          path: wheelhouse/*.whl
  publish_wheel:
    if: contains(github.ref, 'tags/202')
    needs:
      - build_ubuntu
      - build_macos
      - build_windows
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: ubuntu-24.04_x86_64
          - name: ubuntu-24.04_arm64
          - name: ubuntu-22.04_x86_64
          - name: ubuntu-22.04_arm64
          - name: macos-15_arm64
          - name: macos-14_arm64
          - name: windows-2025_x86_64
        python_version:
          - "3.11"
          - "3.12"
          - "3.13"
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    environment: pypi
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v5
        with:
          name: ${{ matrix.platform.name }}_python-${{ matrix.python_version }}
          path: wheelhouse/
      # テスト用
      # - name: Publish package to TestPyPI
      #   uses: pypa/gh-action-pypi-publish@release/v1
      #   with:
      #     repository-url: https://test.pypi.org/legacy/
      #     packages-dir: wheelhouse

      # 本番用
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: wheelhouse

  #     - name: Slack Notification
  #       if: failure()
  #       uses: rtCamp/action-slack-notify@v2
  #       env:
  #         SLACK_CHANNEL: sora-python-sdk
  #         SLACK_COLOR: danger
  #         SLACK_TITLE: Build failed
  #         SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  # create-release:
  #   if: contains(github.ref, 'tags/202')
  #   needs:
  #     - build_ubuntu
  #     - build_macos
  #     #- build_windows
  #   runs-on: ubuntu-24.04
  #   timeout-minutes: 60
  #   steps:
  #     - uses: actions/checkout@v4
  #     # - uses: ./.github/actions/download
  #     #   with:
  #     #     platform: "ubuntu-24.04_x86_64"
  #     #     python_version: "3.11"
  #     # - uses: ./.github/actions/download
  #     #   with:
  #     #     platform: "ubuntu-24.04_x86_64"
  #     #     python_version: "3.12"
  #     
  #     - uses: ./.github/actions/download
  #       with:
  #         platform: "ubuntu-24.04_x86_64"
  #         python_version: "3.13"
  #     - uses: ./.github/actions/download
  #       with:
  #         platform: "ubuntu-24.04_armv8"
  #         python_version: "3.13"
  #     # - uses: ./.github/actions/download
  #     #   with:
  #     #     platform: "macos-15_arm64"
  #     #     python_version: "3.11"
  #     # - uses: ./.github/actions/download
  #     #   with:
  #     #     platform: "macos-15_arm64"
  #     #     python_version: "3.12"
  #     - uses: ./.github/actions/download
  #       with:
  #         platform: "macos-15_arm64"
  #         python_version: "3.13"
  #     # - uses: ./.github/actions/download
  #     #   with:
  #     #     platform: "macos-14_arm64"
  #     #     python_version: "3.11"
  #     # - uses: ./.github/actions/download
  #     #   with:
  #     #     platform: "macos-14_arm64"
  #     #     python_version: "3.12"
  #     # - uses: ./.github/actions/download
  #     #   with:
  #     #     platform: "macos-14_arm64"
  #     #     python_version: "3.13"
  #     # - uses: ./.github/actions/download
  #     #   with:
  #     #     platform: "windows-2025"
  #     #     python_version: "3.11"
  #     # - uses: ./.github/actions/download
  #     #   with:
  #     #     platform: "windows-2025"
  #     #     python_version: "3.12"
  #     # - uses: ./.github/actions/download
  #     #   with:
  #     #     platform: "windows-2025"
  #     #     python_version: "3.13"

  #     - name: Download Ubuntu x86_64 Debug Artifact
  #       uses: ./.github/actions/download
  #       with:
  #         platform: ubuntu-24.04_x86_64
  #         python_version: '3.13'
  #         debug: 'true'

  #     - name: Download Ubuntu armv8 Debug Artifact
  #       uses: ./.github/actions/download
  #       with:
  #         platform: ubuntu-24.04_armv8
  #         python_version: '3.13'
  #         debug: 'true'

  #     - name: Download macOS arm64 Debug Artifact
  #       uses: ./.github/actions/download
  #       with:
  #         platform: macos-15_arm64
  #         python_version: '3.13'
  #         debug: 'true'
  #     
  #     - name: Env to output
  #       run: |
  #         echo "package_paths<<EOF" >> $GITHUB_OUTPUT
  #         cat package_paths.env >> $GITHUB_OUTPUT
  #         echo "EOF" >> $GITHUB_OUTPUT
  #       id: env
  #     - name: Release (Prerelease)
  #       if: contains(github.ref, 'dev')
  #       run: |
  #         gh release create ${{ github.ref_name }} \
  #           --title "${{ github.ref_name }}" \
  #           --prerelease \
  #           $(cat package_paths.env)
  #       env:
  #         GH_TOKEN: ${{ github.token }}
  #     - name: Release
  #       if: ${{ !contains(github.ref, 'dev') }}
  #       run: |
  #         gh release create ${{ github.ref_name }} \
  #           --title "${{ github.ref_name }}" \
  #           $(cat package_paths.env)
  #       env:
  #         GH_TOKEN: ${{ github.token }}
  #     - name: Verify Release Creation
  #       run: |
  #         gh release view ${{ github.ref_name }} --json url
  #       env:
  #         GH_TOKEN: ${{ github.token }}
  #     - name: Slack Notification
  #       if: failure()
  #       uses: rtCamp/action-slack-notify@v2
  #       env:
  #         SLACK_CHANNEL: sora-python-sdk
  #         SLACK_COLOR: danger
  #         SLACK_ICON_EMOJI: ":japanese_ogre:"
  #         SLACK_TITLE: Release failed
  #         SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
